// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/(auth)/login/page.tsx
{
  const handler = {} as typeof import("../../app/(auth)/login/page.js")
  handler satisfies AppPageConfig<"/login">
}

// Validate ../../app/(auth)/verify/page.tsx
{
  const handler = {} as typeof import("../../app/(auth)/verify/page.js")
  handler satisfies AppPageConfig<"/verify">
}

// Validate ../../app/(dashboard)/dashboard/page.tsx
{
  const handler = {} as typeof import("../../app/(dashboard)/dashboard/page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ../../app/page.tsx
{
  const handler = {} as typeof import("../../app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../app/api/auth/logout-all/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/logout-all/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/logout-all">
}

// Validate ../../app/api/auth/logout/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/logout/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/logout">
}

// Validate ../../app/api/auth/me/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/me/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/me">
}

// Validate ../../app/api/auth/refresh/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/refresh/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/refresh">
}

// Validate ../../app/api/auth/register/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/register/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/register">
}

// Validate ../../app/api/auth/request-otp/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/request-otp/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/request-otp">
}

// Validate ../../app/api/auth/send-otp/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/send-otp/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/send-otp">
}

// Validate ../../app/api/auth/sessions/[sessionId]/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/sessions/[sessionId]/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/sessions/[sessionId]">
}

// Validate ../../app/api/auth/sessions/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/sessions/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/sessions">
}

// Validate ../../app/api/auth/test-otp/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/test-otp/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/test-otp">
}

// Validate ../../app/api/auth/test-verify/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/test-verify/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/test-verify">
}

// Validate ../../app/api/auth/verify-otp/route.ts
{
  const handler = {} as typeof import("../../app/api/auth/verify-otp/route.js")
  handler satisfies RouteHandlerConfig<"/api/auth/verify-otp">
}

// Validate ../../app/api/dashboard/device-health/route.ts
{
  const handler = {} as typeof import("../../app/api/dashboard/device-health/route.js")
  handler satisfies RouteHandlerConfig<"/api/dashboard/device-health">
}

// Validate ../../app/api/dashboard/recent-alarms/route.ts
{
  const handler = {} as typeof import("../../app/api/dashboard/recent-alarms/route.js")
  handler satisfies RouteHandlerConfig<"/api/dashboard/recent-alarms">
}

// Validate ../../app/api/dashboard/stats/route.ts
{
  const handler = {} as typeof import("../../app/api/dashboard/stats/route.js")
  handler satisfies RouteHandlerConfig<"/api/dashboard/stats">
}

// Validate ../../app/api/devices/[deviceId]/config/route.ts
{
  const handler = {} as typeof import("../../app/api/devices/[deviceId]/config/route.js")
  handler satisfies RouteHandlerConfig<"/api/devices/[deviceId]/config">
}

// Validate ../../app/api/devices/[deviceId]/diagnostic/route.ts
{
  const handler = {} as typeof import("../../app/api/devices/[deviceId]/diagnostic/route.js")
  handler satisfies RouteHandlerConfig<"/api/devices/[deviceId]/diagnostic">
}

// Validate ../../app/api/devices/[deviceId]/ota/route.ts
{
  const handler = {} as typeof import("../../app/api/devices/[deviceId]/ota/route.js")
  handler satisfies RouteHandlerConfig<"/api/devices/[deviceId]/ota">
}

// Validate ../../app/api/devices/[deviceId]/output/route.ts
{
  const handler = {} as typeof import("../../app/api/devices/[deviceId]/output/route.js")
  handler satisfies RouteHandlerConfig<"/api/devices/[deviceId]/output">
}

// Validate ../../app/api/devices/[deviceId]/route.ts
{
  const handler = {} as typeof import("../../app/api/devices/[deviceId]/route.js")
  handler satisfies RouteHandlerConfig<"/api/devices/[deviceId]">
}

// Validate ../../app/api/devices/[deviceId]/status/route.ts
{
  const handler = {} as typeof import("../../app/api/devices/[deviceId]/status/route.js")
  handler satisfies RouteHandlerConfig<"/api/devices/[deviceId]/status">
}

// Validate ../../app/api/devices/[deviceId]/system/route.ts
{
  const handler = {} as typeof import("../../app/api/devices/[deviceId]/system/route.js")
  handler satisfies RouteHandlerConfig<"/api/devices/[deviceId]/system">
}

// Validate ../../app/api/devices/route.ts
{
  const handler = {} as typeof import("../../app/api/devices/route.js")
  handler satisfies RouteHandlerConfig<"/api/devices">
}

// Validate ../../app/api/groups/[groupId]/devices/route.ts
{
  const handler = {} as typeof import("../../app/api/groups/[groupId]/devices/route.js")
  handler satisfies RouteHandlerConfig<"/api/groups/[groupId]/devices">
}

// Validate ../../app/api/groups/[groupId]/route.ts
{
  const handler = {} as typeof import("../../app/api/groups/[groupId]/route.js")
  handler satisfies RouteHandlerConfig<"/api/groups/[groupId]">
}

// Validate ../../app/api/groups/route.ts
{
  const handler = {} as typeof import("../../app/api/groups/route.js")
  handler satisfies RouteHandlerConfig<"/api/groups">
}

// Validate ../../app/api/users/[userId]/approve/route.ts
{
  const handler = {} as typeof import("../../app/api/users/[userId]/approve/route.js")
  handler satisfies RouteHandlerConfig<"/api/users/[userId]/approve">
}

// Validate ../../app/api/users/route.ts
{
  const handler = {} as typeof import("../../app/api/users/route.js")
  handler satisfies RouteHandlerConfig<"/api/users">
}





// Validate ../../app/(dashboard)/layout.tsx
{
  const handler = {} as typeof import("../../app/(dashboard)/layout.js")
  handler satisfies LayoutConfig<"/">
}

// Validate ../../app/layout.tsx
{
  const handler = {} as typeof import("../../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
